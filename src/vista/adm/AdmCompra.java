package vista.adm;

import accesoadatos.CompraData;
import accesoadatos.DetalleCompraData;
import accesoadatos.ProductoData;
import accesoadatos.ProveedorData;
import entidad.*;
import java.sql.Date;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class AdmCompra extends javax.swing.JPanel {
    
    private double total;
    private ProductoData produData;
    CompraData compraData;
    DetalleCompraData detalleData;
    
    DecimalFormat df = new DecimalFormat("###,###,###.##");
    
    DefaultTableModel modelo = new DefaultTableModel(){
        public boolean isCellEditable(int fila, int columna){
            return false;
        }
    };
            
    public AdmCompra() {
        initComponents();
        armarCabecera();
        this.produData = new ProductoData();
        compraData = new CompraData();
        detalleData = new DetalleCompraData();
        cargarComboProducto();
        cargarComboProveedor();
        ((JTextField) this.jDateChooserCompra.getDateEditor()).setEditable(false);
        this.jDateChooserCompra.setDate(Date.valueOf(LocalDate.now(ZoneId.systemDefault())));
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        jDateChooserCompra = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jComboProveedor = new javax.swing.JComboBox<>();
        jComboProducto = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCompra = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnEliminarProdu = new javax.swing.JButton();
        txtPrecioTotal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jbCargar = new javax.swing.JButton();
        btnHistorial = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registrar compra", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 0, 18))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel1.setText("CÃ³digo");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        txtCodigo.setEditable(false);
        txtCodigo.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jPanel1.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 110, -1));

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel2.setText("Proveedor");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel3.setText("Producto");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel4.setText("Fecha de compra");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, -1, -1));

        txtCantidad.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });
        jPanel1.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, 100, -1));

        btnRegistrar.setBackground(new java.awt.Color(27, 117, 73));
        btnRegistrar.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        btnRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrar.setText("Registrar");
        btnRegistrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegistrar.setMaximumSize(new java.awt.Dimension(150, 32));
        btnRegistrar.setMinimumSize(new java.awt.Dimension(150, 32));
        btnRegistrar.setPreferredSize(new java.awt.Dimension(150, 38));
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, -1, -1));

        jDateChooserCompra.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jDateChooserCompra.setMaxSelectableDate(Date.valueOf(LocalDate.now(ZoneId.systemDefault()))
        );
        jPanel1.add(jDateChooserCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, 240, -1));

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel5.setText("Cantidad");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, -1, -1));

        jComboProveedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboProveedorMousePressed(evt);
            }
        });
        jPanel1.add(jComboProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 230, -1));

        jComboProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboProductoMousePressed(evt);
            }
        });
        jPanel1.add(jComboProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 230, -1));

        jtCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(jtCompra);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 770, 140));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Detalle de Compra");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, -1, -1));

        btnEliminarProdu.setBackground(new java.awt.Color(193, 4, 4));
        btnEliminarProdu.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        btnEliminarProdu.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarProdu.setText("Eliminar Producto");
        btnEliminarProdu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProduActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminarProdu, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 470, -1, 40));

        txtPrecioTotal.setEditable(false);
        txtPrecioTotal.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jPanel1.add(txtPrecioTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(653, 400, 130, -1));

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabel6.setText("Total");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 400, -1, -1));

        jbCargar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbCargar.setText("Cargar");
        jbCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCargarActionPerformed(evt);
            }
        });
        jPanel1.add(jbCargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 142, 100, 40));

        btnHistorial.setBackground(new java.awt.Color(27, 117, 73));
        btnHistorial.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        btnHistorial.setForeground(java.awt.Color.white);
        btnHistorial.setText("Historial de compras");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });
        jPanel1.add(btnHistorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 470, 200, 40));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 58;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        char caracter = evt.getKeyChar();
        if ((caracter < '0') || (caracter > '9')){
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed

        if (total == 0 || jDateChooserCompra.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Debe completar todos los campos.", "Error al registrar", HEIGHT);
        } else {
            // Se toma los datos para compra
            Proveedor proveedor = (Proveedor)jComboProveedor.getSelectedItem();
            LocalDate fecha = jDateChooserCompra.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            
            // Se instancia una compra con los datos tomados de arriba
            Compra compra = new Compra(proveedor, fecha);
            
            // Se manda la compra de arriba a la base de datos
            compraData.nuevaCompra(compra);
            
            /**
             * A la compra creada mas arriba como no tiene id porque solo se le
             * paso dos datos, se busca ese id que se genero automaticamente 
             * en la base de datos con el metodo obtenerUltimaCompra() y se le
             * asigna con el set a la compra anterior, entonces la compra quedaria
             * con todos los datos y se la pasariamos al contructor de detalle
             * Si no se le setea el id a la compra al momento de crear un nuevo
             * detalle en la base de datos tiraria un NullPointerException
             */
            compra.setIdCompra(compraData.obtenerUltimaCompra());
            
            // Se toma los datos para detalle-compra
            for (int i = 0; i < jtCompra.getRowCount(); i++) {
                Producto producto = produData.buscarProducto((int) jtCompra.getValueAt(i, 0));
                int cantidad = Integer.parseInt((String) jtCompra.getValueAt(i, 2));
                double subtotal = (double) jtCompra.getValueAt(i, 4);

                // Se instancia un detalle-compra con los datos anteriores
                DetalleCompra detalle = new DetalleCompra(cantidad, subtotal, compra, producto);

                // Se manda el detalle-compra a la base de datos
                detalleData.nuevoDetalleCompra(detalle);
            }
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void jbCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCargarActionPerformed

        Producto produ = (Producto)jComboProducto.getSelectedItem();
        
        if (txtCantidad.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Indique la cantidad.", "Error al registrar", HEIGHT);
        } else {
            double subtotal = Double.parseDouble(txtCantidad.getText()) * (produ.getPrecioActual());

            modelo.addRow(new Object[]{
                produ.getIdProducto(),
                produ.getNombreProducto(),
                txtCantidad.getText(),
                df.format(produ.getPrecioActual()),
                subtotal
            });
            
            total += subtotal;
            txtPrecioTotal.setText(df.format(total) + "");
            txtCantidad.setText("");
        }
    }//GEN-LAST:event_jbCargarActionPerformed

    private void btnEliminarProduActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProduActionPerformed
        try {
            //row: Para guardar la fila seleccionada.
            int row = jtCompra.getSelectedRow();

            //Redondea el total a 2 decimales
            total = Math.round(total * 100.0) / 100.0;

            //Resta al total el subtotal de la fila seleccionada
            total -= (double) modelo.getValueAt(row, 4);

            //El TextField recibe el nuevo total y se formatea con decimales
            txtPrecioTotal.setText(df.format(total) + "");
            modelo.removeRow(row);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ningÃºn producto para eliminar.");
        }
    }//GEN-LAST:event_btnEliminarProduActionPerformed

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
        int idCompra = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el CÃ³digo de la compra"));
        refrescarTabla(idCompra);
    }//GEN-LAST:event_btnHistorialActionPerformed

    private void jComboProductoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboProductoMousePressed
        cargarComboProducto();
    }//GEN-LAST:event_jComboProductoMousePressed

    private void jComboProveedorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboProveedorMousePressed
        cargarComboProveedor();
    }//GEN-LAST:event_jComboProveedorMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminarProdu;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<Producto> jComboProducto;
    private javax.swing.JComboBox<Proveedor> jComboProveedor;
    private com.toedter.calendar.JDateChooser jDateChooserCompra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCargar;
    private javax.swing.JTable jtCompra;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtPrecioTotal;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera(){
        modelo.addColumn("CÃDIGO");
        modelo.addColumn("PRODUCTO");
        modelo.addColumn("CANTIDAD");
        modelo.addColumn("PRECIO");
        modelo.addColumn("SUB-TOTAL");
        jtCompra.setModel(modelo);
    }
    
    public void cargarComboProveedor(){
        for (int i = jComboProveedor.getItemCount() - 1; i >= 0; i--) {
            jComboProveedor.removeItemAt(i);
        }
        
        ProveedorData proveData = new ProveedorData();
     
        for(Proveedor proveedor : proveData.listarProveedor()){
            jComboProveedor.addItem(proveedor);
        }
    }
    
    public void cargarComboProducto(){
        for (int i = jComboProducto.getItemCount() - 1; i >= 0; i--) {
            jComboProducto.removeItemAt(i);
        }

        for(Producto producto : produData.listarProducto()){
            jComboProducto.addItem(producto);
        }
    }
    
    private void limpiarFilas() {
        for (int i = modelo.getRowCount() - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
     
    private void refrescarTabla(int id) {
        limpiarFilas();
        //Producto producto = (Producto) jComboProducto.getSelectedItem();
        List<DetalleCompra> lista = new ArrayList<>();
        lista = detalleData.listarProductosPorCompra(id);
        
        for (DetalleCompra producto : lista) {
            modelo.addRow(new Object[]{
                producto.getIdDetalleCompra(),
                producto.getCantidad(),
                producto.getPrecioCosto(),
                producto.getCompra().getIdCompra(),
                producto.getProducto().getNombreProducto()
            });
        }
    }
}  
